services:

  # SERVIDOR PHP/APACHE
  php:
    build:
      context: ./ # CAMINHO ATÉ ONDE ESTÁ O DOCKERFILE (a raiz do projeto)
      dockerfile: Dockerfile # NOME DO DOCKERFILE A SER USADO PARA MONTAR A IMAGEM DO PHP/Apache
    container_name: php_apache # NOME DO CONTAINER PARA FACILITAR IDENTIFICAÇÃO
    restart: always # REINICIA AUTOMATICAMENTE SE O CONTAINER CAIR
    volumes:
      - ./crud:/var/www/html # MAPEIA A PASTA LOCAL ./crud PRO /var/www/html DENTRO DO CONTAINER (onde ficam os arquivos PHP)
    ports:
      - "80:80" # EXPÕE A PORTA 80 (APACHE) DO CONTAINER PARA A PORTA 80 DO HOST (seu PC)
    networks:
      - app-network # ADICIONA O CONTAINER NA REDE PERSONALIZADA

  # SERVIDOR MYSQL
  mysql:
    image: mysql:5.7 # USANDO VERSÃO 5.7 (MAIS ESTÁVEL EM MUITOS CASOS QUE A 8.0)
    container_name: mysql_container # NOME DO CONTAINER DO MYSQL
    restart: always # REINICIA AUTOMATICAMENTE SE CAIR
    volumes:
      - ./mysql:/var/lib/mysql # PERSISTÊNCIA DOS DADOS DO MYSQL NA PASTA LOCAL ./mysql
      - ./mysql-init:/docker-entrypoint-initdb.d # JOGA AS TABELAS PARA DENTRO DO MYSQL
    ports:
      - "3306:3306" # EXPÕE A PORTA 3306 DO MYSQL PARA O HOST (para conexões externas, se precisar)
    environment:
      MYSQL_ROOT_PASSWORD: postdba # SENHA DO ROOT DO MYSQL (muda essa quando for produção, hein)
      MYSQL_DATABASE: crud # BANCO DE DADOS QUE SERÁ CRIADO AUTOMATICAMENTE NA PRIMEIRA INICIALIZAÇÃO
    networks:
      - app-network # MESMA REDE PARA PODER SE COMUNICAR COM OS OUTROS CONTAINERS

# REDE PERSONALIZADA PARA OS CONTAINERS
networks:
  app-network:
    driver: bridge # TIPO DE REDE PADRÃO PARA COMUNICAÇÃO ENTRE CONTAINERS
